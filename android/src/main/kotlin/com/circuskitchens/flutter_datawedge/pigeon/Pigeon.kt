// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.circuskitchens.flutter_datawedge.pigeon

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Result types when creating a profile */
enum class CreateProfileResponseType(val raw: Int) {
  PROFILEALREADYEXISTS(0),
  PROFILENAMEEMPTY(1),
  PROFILECREATED(2);

  companion object {
    fun ofRaw(raw: Int): CreateProfileResponseType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Mode for profile creations */
enum class ConfigMode(val raw: Int) {
  CREATEIFNOTEXISTS(0),
  OVERWRITE(1),
  UPDATE(2);

  companion object {
    fun ofRaw(raw: Int): ConfigMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Plugin to be configured */
enum class PluginName(val raw: Int) {
  BARCODE(0),
  MSR(1),
  RFID(2),
  SERIAL(3),
  VOICE(4),
  WORKFLOW(5),
  BDF(6),
  ADF(7),
  TOKENS(8),
  INTENT(9),
  KEYSTROKE(10),
  IP(11),
  DCP(12),
  EKB(13);

  companion object {
    fun ofRaw(raw: Int): PluginName? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScannerIdentifer(val raw: Int) {
  AUTO(0),
  INTERNALIMAGER(1),
  INTERNALLASER(2),
  INTERNALCAMERA(3),
  SERIALSSI(4),
  BLUETOOTHSSI(5),
  BLUETOOTHRS6000(6),
  BLUETOOTHDS2278(7),
  BLUETOOTHDS3678(8),
  PLUGABLESSI(9),
  PLUGABLESSIRS5000(10),
  USBSSIDS3608(11),
  BLUETOOTHZEBRA(12),
  USBZEBRA(13);

  companion object {
    fun ofRaw(raw: Int): ScannerIdentifer? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class UpcSupplementalMode(val raw: Int) {
  NONE(0),
  ALWAYS(1),
  AUTO(2),
  SMART(3),
  SUPPLEMENTAL378TO379(4),
  SUPPLEMENTAL978TO979(5),
  SUPPLEMENTAL414TO419AND434TO439(6),
  SUPPLEMENTAL977(7);

  companion object {
    fun ofRaw(raw: Int): UpcSupplementalMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class UpcEanCouponReport(val raw: Int) {
  OLDMODE(0),
  NEWMODE(1),
  BOTH(2);

  companion object {
    fun ofRaw(raw: Int): UpcEanCouponReport? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class UpcEanBooklandFormat(val raw: Int) {
  ISBN10(0),
  ISBN13(1);

  companion object {
    fun ofRaw(raw: Int): UpcEanBooklandFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScanningMode(val raw: Int) {
  SINGLE(0),
  UDI(1),
  MULTIBARCODE(2),
  DOCUMENTCAPTURE(3);

  companion object {
    fun ofRaw(raw: Int): ScanningMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class InverseOcr(val raw: Int) {
  REGULAR(0),
  INVERSE(1),
  AUTO(2);

  companion object {
    fun ofRaw(raw: Int): InverseOcr? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class OcrOrientation(val raw: Int) {
  DEGREE_0(0),
  DEGREE_90(1),
  DEGREE_180(2),
  DEGREE_270(3),
  OMNIDIRECTIONAL(4);

  companion object {
    fun ofRaw(raw: Int): OcrOrientation? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class DpmMode(val raw: Int) {
  DISABLED(0),
  MODE1(1),
  MODE2(2);

  companion object {
    fun ofRaw(raw: Int): DpmMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class DpmIlluminationControl(val raw: Int) {
  DIRECT(0),
  INDIRECT(1),
  CYCLE(2);

  companion object {
    fun ofRaw(raw: Int): DpmIlluminationControl? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class VolumeSliderType(val raw: Int) {
  RINGER(0),
  MUSICMEDIA(1),
  ALARMS(2),
  NOTIFICATION(3);

  companion object {
    fun ofRaw(raw: Int): VolumeSliderType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CodeIdType(val raw: Int) {
  NONE(0),
  AIM(1),
  SYMBOL(2);

  companion object {
    fun ofRaw(raw: Int): CodeIdType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ViewFinderMode(val raw: Int) {
  ENABLED(0),
  STATICRETICLE(1);

  companion object {
    fun ofRaw(raw: Int): ViewFinderMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class Charset(val raw: Int) {
  AUTO(0),
  UTF8(1),
  ISO88591(2),
  SHIFTJIS(3),
  GB18030(4),
  NONE(5);

  companion object {
    fun ofRaw(raw: Int): Charset? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class EffortLevel(val raw: Int) {
  LEVEL_0(0),
  LEVEL_1(1),
  LEVEL_2(2),
  LEVEL_3(3);

  companion object {
    fun ofRaw(raw: Int): EffortLevel? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class Inverse1dMode(val raw: Int) {
  DISABLE(0),
  ENABLE(1),
  AUTO(2);

  companion object {
    fun ofRaw(raw: Int): Inverse1dMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class DelayToLowPowerMode(val raw: Int) {
  SECONDS_1(0),
  SECONDS_30(1),
  MINUTES_1(2),
  MINUTES_5(3);

  companion object {
    fun ofRaw(raw: Int): DelayToLowPowerMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class LcdMode(val raw: Int) {
  DISABLED(0),
  ENABLED(1);

  companion object {
    fun ofRaw(raw: Int): LcdMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class IlluminationMode(val raw: Int) {
  OFF(0),
  TORCH(1);

  companion object {
    fun ofRaw(raw: Int): IlluminationMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class SceneDetectQualifier(val raw: Int) {
  NONE(0),
  PROXIMITYSENSOR(1);

  companion object {
    fun ofRaw(raw: Int): SceneDetectQualifier? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AimType(val raw: Int) {
  TRIGGER(0),
  TIMEDHOLD(1),
  TIMEDRELEASE(2),
  PRESSANDRELEASE(3),
  PRESENTATION(4),
  CONTINOUSREAD(5),
  PRESSANDSUSTAIN(6),
  PRESSANDCONTINUE(7),
  TIMEDCONTINOUS(8);

  companion object {
    fun ofRaw(raw: Int): AimType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class SwitchOnEvent(val raw: Int) {
  DISABLED(0),
  ONCONNECT(1),
  ONDISCONNECT(2),
  CONNECTORDISCONNECT(3);

  companion object {
    fun ofRaw(raw: Int): SwitchOnEvent? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PresentationModeSensitivity(val raw: Int) {
  HIGH(0),
  MEDIUM(1),
  LOW(2);

  companion object {
    fun ofRaw(raw: Int): PresentationModeSensitivity? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Result when creating a profile
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class CreateProfileResponse (
  val responseType: CreateProfileResponseType

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CreateProfileResponse {
      val responseType = CreateProfileResponseType.ofRaw(list[0] as Int)!!
      return CreateProfileResponse(responseType)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      responseType.raw,
    )
  }
}

/**
 * An application that will trigger the profile
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AppEntry (
  val packageName: String,
  val activityList: List<String?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AppEntry {
      val packageName = list[0] as String
      val activityList = list[1] as List<String?>
      return AppEntry(packageName, activityList)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      packageName,
      activityList,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PluginBarcodeParamters (
  val dataBarToUpcEan: Boolean? = null,
  val upcEnableMarginlessDecode: Boolean? = null,
  val upcEanSecurityLevel: Long? = null,
  val upcEanSupplemental2: Boolean? = null,
  val upcEanSupplemental5: Boolean? = null,
  val upcEanSupplementalMode: UpcSupplementalMode? = null,
  val upcEanRetryCount: Long? = null,
  val upcEeanLinearDecode: Boolean? = null,
  val upcEanBookland: Boolean? = null,
  val upcEanCoupon: Boolean? = null,
  val upcEanCouponReport: UpcEanCouponReport? = null,
  val upcEanZeroExtend: Boolean? = null,
  val upceanBooklandFormat: UpcEanBooklandFormat? = null,
  val scanningMode: ScanningMode? = null,
  val docCaptureTemplate: String? = null,
  val commonBarcodeDynamicQuantity: String? = null,
  val barcodeHighlightingEnabled: Boolean? = null,
  val ruleName: String? = null,
  val enableUdiGs1: Boolean? = null,
  val enableUdiHibcc: Boolean? = null,
  val enableUdiIccbba: Boolean? = null,
  val ocrOrientation: OcrOrientation? = null,
  val ocrLines: Long? = null,
  val ocrMinChars: Long? = null,
  val ocrMaxChars: Long? = null,
  val ocrSubset: String? = null,
  val ocrSubset: Long? = null,
  val ocrTemplate: String? = null,
  val ocrCheckDigitModulus: Long? = null,
  val ocrCheckDigitMultiplier: Long? = null,
  val ocrCheckDigitValidation: Long? = null,
  val inverseOcr: InverseOcr? = null,
  val presentationModeSensitivity: PresentationModeSensitivity? = null,
  val enableHardwareTrigger: Boolean? = null,
  val autoSwitchToDefaultOnEvent: SwitchOnEvent? = null,
  val digimarcDecoding: Boolean? = null,
  val multiBarcodeCount: Long? = null,
  val enableInstantReporting: Boolean? = null,
  val reportDecodedBarcodes: Boolean? = null,
  val scannerInputEnabled: Boolean? = null,
  val scannerSelection: ScannerIdentifer? = null,
  val configureAllScanners: Boolean? = null,
  val scannerSelectionByIdentifier: String? = null,
  val enableAimMode: Boolean? = null,
  val beamTimer: Long? = null,
  val enableAdaptiveScanning: Boolean? = null,
  val enablePicklist: Boolean? = null,
  val aimType: AimType? = null,
  val sceneDetectQualifier: SceneDetectQualifier? = null,
  val aimTimer: Long? = null,
  val sameBarcodeTimeout: Long? = null,
  val triggerWakeupScan: Boolean? = null,
  val differentBarcodeTimeout: Long? = null,
  val illuminationMode: IlluminationMode? = null,
  val illuminationBrightness: Long? = null,
  val lcdMode: LcdMode? = null,
  val lowPowerTimeout: Long? = null,
  val delayToLowPowerMode: DelayToLowPowerMode? = null,
  val inverse1dMode: Inverse1dMode? = null,
  val viewFinderSize: Long? = null,
  val viewFinderPosX: Long? = null,
  val viewFinderPosY: Long? = null,
  val marginlessEffortLevel1d: EffortLevel? = null,
  val poorQualityBcDecodeEffortLevel: EffortLevel? = null,
  val charsetName: Charset? = null,
  val autoCharsetPrefferedOrder: List<String?>? = null,
  val autoCharsetFallback: Charset? = null,
  val viewFinderMode: ViewFinderMode? = null,
  val codeIdType: CodeIdType? = null,
  val volumeSliderType: VolumeSliderType? = null,
  val decodeAudioFeedbackUri: String? = null,
  val decodeHapticFeedback: Boolean? = null,
  val btDisconnectOnExit: Boolean? = null,
  val connectionIdleTime: Long? = null,
  val establishConnectionTime: Long? = null,
  val remoteScannerAudioFeedbackMode: Long? = null,
  val remoteScannerLedFeedbackMode: Long? = null,
  val distplayBtAddressBarcode: Boolean? = null,
  val goodDecodeLedTimer: Long? = null,
  val decodingLedFeedback: Boolean? = null,
  val decoderUsPlanetReportCheckDigit: Boolean? = null,
  val decodeScreenNotification: Boolean? = null,
  val decodeScreenTime: Long? = null,
  val decodeScreenTranslucency: Long? = null,
  val keepParingInfoAfterReboot: Boolean? = null,
  val dpmIlluminationControl: DpmIlluminationControl? = null,
  val dpmMode: DpmMode? = null,
  val qrLaunchEnable: Boolean? = null,
  val qrLaunchEnableQrDecoder: Boolean? = null,
  val qrLaunchShowConfirmationDialog: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PluginBarcodeParamters {
      val dataBarToUpcEan = list[0] as Boolean?
      val upcEnableMarginlessDecode = list[1] as Boolean?
      val upcEanSecurityLevel = list[2].let { if (it is Int) it.toLong() else it as Long? }
      val upcEanSupplemental2 = list[3] as Boolean?
      val upcEanSupplemental5 = list[4] as Boolean?
      val upcEanSupplementalMode: UpcSupplementalMode? = (list[5] as Int?)?.let {
        UpcSupplementalMode.ofRaw(it)
      }
      val upcEanRetryCount = list[6].let { if (it is Int) it.toLong() else it as Long? }
      val upcEeanLinearDecode = list[7] as Boolean?
      val upcEanBookland = list[8] as Boolean?
      val upcEanCoupon = list[9] as Boolean?
      val upcEanCouponReport: UpcEanCouponReport? = (list[10] as Int?)?.let {
        UpcEanCouponReport.ofRaw(it)
      }
      val upcEanZeroExtend = list[11] as Boolean?
      val upceanBooklandFormat: UpcEanBooklandFormat? = (list[12] as Int?)?.let {
        UpcEanBooklandFormat.ofRaw(it)
      }
      val scanningMode: ScanningMode? = (list[13] as Int?)?.let {
        ScanningMode.ofRaw(it)
      }
      val docCaptureTemplate = list[14] as String?
      val commonBarcodeDynamicQuantity = list[15] as String?
      val barcodeHighlightingEnabled = list[16] as Boolean?
      val ruleName = list[17] as String?
      val enableUdiGs1 = list[18] as Boolean?
      val enableUdiHibcc = list[19] as Boolean?
      val enableUdiIccbba = list[20] as Boolean?
      val ocrOrientation: OcrOrientation? = (list[21] as Int?)?.let {
        OcrOrientation.ofRaw(it)
      }
      val ocrLines = list[22].let { if (it is Int) it.toLong() else it as Long? }
      val ocrMinChars = list[23].let { if (it is Int) it.toLong() else it as Long? }
      val ocrMaxChars = list[24].let { if (it is Int) it.toLong() else it as Long? }
      val ocrSubset = list[25] as String?
      val ocrSubset = list[26].let { if (it is Int) it.toLong() else it as Long? }
      val ocrTemplate = list[27] as String?
      val ocrCheckDigitModulus = list[28].let { if (it is Int) it.toLong() else it as Long? }
      val ocrCheckDigitMultiplier = list[29].let { if (it is Int) it.toLong() else it as Long? }
      val ocrCheckDigitValidation = list[30].let { if (it is Int) it.toLong() else it as Long? }
      val inverseOcr: InverseOcr? = (list[31] as Int?)?.let {
        InverseOcr.ofRaw(it)
      }
      val presentationModeSensitivity: PresentationModeSensitivity? = (list[32] as Int?)?.let {
        PresentationModeSensitivity.ofRaw(it)
      }
      val enableHardwareTrigger = list[33] as Boolean?
      val autoSwitchToDefaultOnEvent: SwitchOnEvent? = (list[34] as Int?)?.let {
        SwitchOnEvent.ofRaw(it)
      }
      val digimarcDecoding = list[35] as Boolean?
      val multiBarcodeCount = list[36].let { if (it is Int) it.toLong() else it as Long? }
      val enableInstantReporting = list[37] as Boolean?
      val reportDecodedBarcodes = list[38] as Boolean?
      val scannerInputEnabled = list[39] as Boolean?
      val scannerSelection: ScannerIdentifer? = (list[40] as Int?)?.let {
        ScannerIdentifer.ofRaw(it)
      }
      val configureAllScanners = list[41] as Boolean?
      val scannerSelectionByIdentifier = list[42] as String?
      val enableAimMode = list[43] as Boolean?
      val beamTimer = list[44].let { if (it is Int) it.toLong() else it as Long? }
      val enableAdaptiveScanning = list[45] as Boolean?
      val enablePicklist = list[46] as Boolean?
      val aimType: AimType? = (list[47] as Int?)?.let {
        AimType.ofRaw(it)
      }
      val sceneDetectQualifier: SceneDetectQualifier? = (list[48] as Int?)?.let {
        SceneDetectQualifier.ofRaw(it)
      }
      val aimTimer = list[49].let { if (it is Int) it.toLong() else it as Long? }
      val sameBarcodeTimeout = list[50].let { if (it is Int) it.toLong() else it as Long? }
      val triggerWakeupScan = list[51] as Boolean?
      val differentBarcodeTimeout = list[52].let { if (it is Int) it.toLong() else it as Long? }
      val illuminationMode: IlluminationMode? = (list[53] as Int?)?.let {
        IlluminationMode.ofRaw(it)
      }
      val illuminationBrightness = list[54].let { if (it is Int) it.toLong() else it as Long? }
      val lcdMode: LcdMode? = (list[55] as Int?)?.let {
        LcdMode.ofRaw(it)
      }
      val lowPowerTimeout = list[56].let { if (it is Int) it.toLong() else it as Long? }
      val delayToLowPowerMode: DelayToLowPowerMode? = (list[57] as Int?)?.let {
        DelayToLowPowerMode.ofRaw(it)
      }
      val inverse1dMode: Inverse1dMode? = (list[58] as Int?)?.let {
        Inverse1dMode.ofRaw(it)
      }
      val viewFinderSize = list[59].let { if (it is Int) it.toLong() else it as Long? }
      val viewFinderPosX = list[60].let { if (it is Int) it.toLong() else it as Long? }
      val viewFinderPosY = list[61].let { if (it is Int) it.toLong() else it as Long? }
      val marginlessEffortLevel1d: EffortLevel? = (list[62] as Int?)?.let {
        EffortLevel.ofRaw(it)
      }
      val poorQualityBcDecodeEffortLevel: EffortLevel? = (list[63] as Int?)?.let {
        EffortLevel.ofRaw(it)
      }
      val charsetName: Charset? = (list[64] as Int?)?.let {
        Charset.ofRaw(it)
      }
      val autoCharsetPrefferedOrder = list[65] as List<String?>?
      val autoCharsetFallback: Charset? = (list[66] as Int?)?.let {
        Charset.ofRaw(it)
      }
      val viewFinderMode: ViewFinderMode? = (list[67] as Int?)?.let {
        ViewFinderMode.ofRaw(it)
      }
      val codeIdType: CodeIdType? = (list[68] as Int?)?.let {
        CodeIdType.ofRaw(it)
      }
      val volumeSliderType: VolumeSliderType? = (list[69] as Int?)?.let {
        VolumeSliderType.ofRaw(it)
      }
      val decodeAudioFeedbackUri = list[70] as String?
      val decodeHapticFeedback = list[71] as Boolean?
      val btDisconnectOnExit = list[72] as Boolean?
      val connectionIdleTime = list[73].let { if (it is Int) it.toLong() else it as Long? }
      val establishConnectionTime = list[74].let { if (it is Int) it.toLong() else it as Long? }
      val remoteScannerAudioFeedbackMode = list[75].let { if (it is Int) it.toLong() else it as Long? }
      val remoteScannerLedFeedbackMode = list[76].let { if (it is Int) it.toLong() else it as Long? }
      val distplayBtAddressBarcode = list[77] as Boolean?
      val goodDecodeLedTimer = list[78].let { if (it is Int) it.toLong() else it as Long? }
      val decodingLedFeedback = list[79] as Boolean?
      val decoderUsPlanetReportCheckDigit = list[80] as Boolean?
      val decodeScreenNotification = list[81] as Boolean?
      val decodeScreenTime = list[82].let { if (it is Int) it.toLong() else it as Long? }
      val decodeScreenTranslucency = list[83].let { if (it is Int) it.toLong() else it as Long? }
      val keepParingInfoAfterReboot = list[84] as Boolean?
      val dpmIlluminationControl: DpmIlluminationControl? = (list[85] as Int?)?.let {
        DpmIlluminationControl.ofRaw(it)
      }
      val dpmMode: DpmMode? = (list[86] as Int?)?.let {
        DpmMode.ofRaw(it)
      }
      val qrLaunchEnable = list[87] as Boolean?
      val qrLaunchEnableQrDecoder = list[88] as Boolean?
      val qrLaunchShowConfirmationDialog = list[89] as Boolean?
      return PluginBarcodeParamters(dataBarToUpcEan, upcEnableMarginlessDecode, upcEanSecurityLevel, upcEanSupplemental2, upcEanSupplemental5, upcEanSupplementalMode, upcEanRetryCount, upcEeanLinearDecode, upcEanBookland, upcEanCoupon, upcEanCouponReport, upcEanZeroExtend, upceanBooklandFormat, scanningMode, docCaptureTemplate, commonBarcodeDynamicQuantity, barcodeHighlightingEnabled, ruleName, enableUdiGs1, enableUdiHibcc, enableUdiIccbba, ocrOrientation, ocrLines, ocrMinChars, ocrMaxChars, ocrSubset, ocrSubset, ocrTemplate, ocrCheckDigitModulus, ocrCheckDigitMultiplier, ocrCheckDigitValidation, inverseOcr, presentationModeSensitivity, enableHardwareTrigger, autoSwitchToDefaultOnEvent, digimarcDecoding, multiBarcodeCount, enableInstantReporting, reportDecodedBarcodes, scannerInputEnabled, scannerSelection, configureAllScanners, scannerSelectionByIdentifier, enableAimMode, beamTimer, enableAdaptiveScanning, enablePicklist, aimType, sceneDetectQualifier, aimTimer, sameBarcodeTimeout, triggerWakeupScan, differentBarcodeTimeout, illuminationMode, illuminationBrightness, lcdMode, lowPowerTimeout, delayToLowPowerMode, inverse1dMode, viewFinderSize, viewFinderPosX, viewFinderPosY, marginlessEffortLevel1d, poorQualityBcDecodeEffortLevel, charsetName, autoCharsetPrefferedOrder, autoCharsetFallback, viewFinderMode, codeIdType, volumeSliderType, decodeAudioFeedbackUri, decodeHapticFeedback, btDisconnectOnExit, connectionIdleTime, establishConnectionTime, remoteScannerAudioFeedbackMode, remoteScannerLedFeedbackMode, distplayBtAddressBarcode, goodDecodeLedTimer, decodingLedFeedback, decoderUsPlanetReportCheckDigit, decodeScreenNotification, decodeScreenTime, decodeScreenTranslucency, keepParingInfoAfterReboot, dpmIlluminationControl, dpmMode, qrLaunchEnable, qrLaunchEnableQrDecoder, qrLaunchShowConfirmationDialog)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      dataBarToUpcEan,
      upcEnableMarginlessDecode,
      upcEanSecurityLevel,
      upcEanSupplemental2,
      upcEanSupplemental5,
      upcEanSupplementalMode?.raw,
      upcEanRetryCount,
      upcEeanLinearDecode,
      upcEanBookland,
      upcEanCoupon,
      upcEanCouponReport?.raw,
      upcEanZeroExtend,
      upceanBooklandFormat?.raw,
      scanningMode?.raw,
      docCaptureTemplate,
      commonBarcodeDynamicQuantity,
      barcodeHighlightingEnabled,
      ruleName,
      enableUdiGs1,
      enableUdiHibcc,
      enableUdiIccbba,
      ocrOrientation?.raw,
      ocrLines,
      ocrMinChars,
      ocrMaxChars,
      ocrSubset,
      ocrSubset,
      ocrTemplate,
      ocrCheckDigitModulus,
      ocrCheckDigitMultiplier,
      ocrCheckDigitValidation,
      inverseOcr?.raw,
      presentationModeSensitivity?.raw,
      enableHardwareTrigger,
      autoSwitchToDefaultOnEvent?.raw,
      digimarcDecoding,
      multiBarcodeCount,
      enableInstantReporting,
      reportDecodedBarcodes,
      scannerInputEnabled,
      scannerSelection?.raw,
      configureAllScanners,
      scannerSelectionByIdentifier,
      enableAimMode,
      beamTimer,
      enableAdaptiveScanning,
      enablePicklist,
      aimType?.raw,
      sceneDetectQualifier?.raw,
      aimTimer,
      sameBarcodeTimeout,
      triggerWakeupScan,
      differentBarcodeTimeout,
      illuminationMode?.raw,
      illuminationBrightness,
      lcdMode?.raw,
      lowPowerTimeout,
      delayToLowPowerMode?.raw,
      inverse1dMode?.raw,
      viewFinderSize,
      viewFinderPosX,
      viewFinderPosY,
      marginlessEffortLevel1d?.raw,
      poorQualityBcDecodeEffortLevel?.raw,
      charsetName?.raw,
      autoCharsetPrefferedOrder,
      autoCharsetFallback?.raw,
      viewFinderMode?.raw,
      codeIdType?.raw,
      volumeSliderType?.raw,
      decodeAudioFeedbackUri,
      decodeHapticFeedback,
      btDisconnectOnExit,
      connectionIdleTime,
      establishConnectionTime,
      remoteScannerAudioFeedbackMode,
      remoteScannerLedFeedbackMode,
      distplayBtAddressBarcode,
      goodDecodeLedTimer,
      decodingLedFeedback,
      decoderUsPlanetReportCheckDigit,
      decodeScreenNotification,
      decodeScreenTime,
      decodeScreenTranslucency,
      keepParingInfoAfterReboot,
      dpmIlluminationControl?.raw,
      dpmMode?.raw,
      qrLaunchEnable,
      qrLaunchEnableQrDecoder,
      qrLaunchShowConfirmationDialog,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ProfileConfig (
  val profileName: String,
  val configMode: ConfigMode,
  val barcodeParamters: PluginBarcodeParamters? = null,
  val profileEnabled: Boolean,
  val appList: List<AppEntry?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ProfileConfig {
      val profileName = list[0] as String
      val configMode = ConfigMode.ofRaw(list[1] as Int)!!
      val barcodeParamters: PluginBarcodeParamters? = (list[2] as List<Any?>?)?.let {
        PluginBarcodeParamters.fromList(it)
      }
      val profileEnabled = list[3] as Boolean
      val appList = list[4] as List<AppEntry?>?
      return ProfileConfig(profileName, configMode, barcodeParamters, profileEnabled, appList)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      profileName,
      configMode.raw,
      barcodeParamters?.toList(),
      profileEnabled,
      appList,
    )
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class DataWedgeFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by DataWedgeFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onScannerStatusChanged(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onScannerStatusChanged", codec)
    channel.send(null) {
      callback()
    }
  }
  fun onScanResult(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onScanResult", codec)
    channel.send(null) {
      callback()
    }
  }
  fun onProfileChange(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onProfileChange", codec)
    channel.send(null) {
      callback()
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object DataWedgeHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AppEntry.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CreateProfileResponse.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PluginBarcodeParamters.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ProfileConfig.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AppEntry -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is CreateProfileResponse -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PluginBarcodeParamters -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is ProfileConfig -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface DataWedgeHostApi {
  fun createProfile(profileName: String, callback: (Result<CreateProfileResponse>) -> Unit)
  fun getPackageIdentifer(): String
  fun setProfileConfig(config: ProfileConfig, callback: (Result<Unit>) -> Unit)
  fun listenScannerStatus(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by DataWedgeHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      DataWedgeHostApiCodec
    }
    /** Sets up an instance of `DataWedgeHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: DataWedgeHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.createProfile", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val profileNameArg = args[0] as String
            api.createProfile(profileNameArg) { result: Result<CreateProfileResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.getPackageIdentifer", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getPackageIdentifer())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.setProfileConfig", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as ProfileConfig
            api.setProfileConfig(configArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.listenScannerStatus", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.listenScannerStatus() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
